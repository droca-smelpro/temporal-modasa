{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "lastest_values_table",
    "name" : "Lastest values table",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 5,
      "resources" : [ ],
      "templateHtml" : "",
      "templateCss" : ".tb-scroll-container {\r\n  position: relative;      /* stays within widget bounds */\r\n  overflow-y: auto;        /* vertical scroll */\r\n  overflow-x: hidden;\r\n  -webkit-overflow-scrolling: touch; /* smooth on touch devices */\r\n}\r\n\r\n.mat-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.mat-cell {\r\n  font-family: 'Roboto', sans-serif; /* Roboto font */\r\n  font-size: 13px;                   /* Smaller font */\r\n  padding: 13px 13px;                /* More vertical padding = extra space top/bottom */\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n/*\r\n.mat-row:first-child .mat-cell {\r\n  border-top: 1px solid #e0e0e0;\r\n}\r\n*/\r\n\r\n.key-cell {\r\n  text-align: left;\r\n  font-weight: normal;\r\n  white-space: nowrap;       /* prevent wrapping */\r\n  padding-right: 8px;        /* small gap before bar */\r\n  max-width: 180px;          /* adjust as needed */\r\n  min-width: 100px;          /* won‚Äôt shrink too much */\r\n  width: 1%;                 /* force auto-shrink */\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;   /* ‚Ä¶ if text too long */\r\n}\r\n\r\n.value-cell {\r\n  text-align: left;          /* align bar to left edge */\r\n  width: 100%;               /* take all remaining space */\r\n}\r\n\r\n\r\n.mat-row:hover { \r\n  background-color: #f5f5f5; \r\n}\r\n\r\n.tb-search-container {\r\n  padding: 6px 5px 25px 0px;\r\n  background: transparent;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  display: flex;               /* enable flexbox */\r\n  justify-content: flex-end;   /* push search to the right */\r\n}\r\n\r\n.tb-search {\r\n  width: 30%;                  /* half the container width */\r\n  max-width: 250px;            /* optional: prevent it from growing too big */\r\n  padding: 6px 10px;\r\n  font-size: 13px;\r\n  font-family: 'Roboto', sans-serif;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.bar-container {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 16px;\r\n}\r\n\r\n.bar-fill {\r\n  height: 100%;\r\n  border-radius: 3px;\r\n  transition: width 0.3s ease;   /* smooth update */\r\n}\r\n\r\n.bar-label {\r\n  margin-left: 6px;\r\n  font-size: 12px;\r\n  color: #444;   /* darker for readability */\r\n  white-space: nowrap;\r\n}\r\n",
      "controllerScript" : "self.onInit = function() {\r\n\r\n    self.ctx.colorA = self.ctx.settings.color_a || \"#4CAF50\";\r\n    self.ctx.colorB = self.ctx.settings.color_b || \"#A5D7A7\";\r\n\r\n    self.ctx.tables = [];\r\n    self.ctx.maxValues = []; // ‚úÖ initialize here\r\n\r\n    for (var i = 0; i < self.ctx.datasources\r\n        .length; i++) {\r\n        var tbDatasource = self.ctx.datasources[i];\r\n\r\n        var datasourceId = 'tbDatasource' + i;\r\n        self.ctx.$container.append(\r\n            \"<div id='\" + datasourceId +\r\n            \"' class='tbDatasource-container'></div>\"\r\n        );\r\n\r\n        var datasourceContainer = $('#' + datasourceId,\r\n            self.ctx.$container);\r\n\r\n        // üîç Add search input\r\n        var searchId = 'search' + i;\r\n        datasourceContainer.append(\r\n            \"<div class='tb-search-container'>\" +\r\n            \"<input id='\" + searchId +\r\n            \"' type='text' class='tb-search' placeholder='Search...'>\" +\r\n            \"</div>\"\r\n        );\r\n\r\n        var tableId = 'table' + i;\r\n        datasourceContainer.append(\r\n            \"<div class='tb-scroll-container'>\" +\r\n            \"<table id='\" + tableId +\r\n            \"' class='mat-table full-width'><tbody></tbody></table>\" +\r\n            \"</div>\"\r\n        );\r\n\r\n        // Store table & search input\r\n        self.ctx.tables.push({\r\n            body: $('#' + tableId + ' tbody',\r\n                self.ctx.$container),\r\n            rows: {},\r\n            searchInput: $('#' + searchId, self\r\n                .ctx.$container)\r\n        });\r\n\r\n        // üîç Hook up filtering\r\n        (function(tableObj) {\r\n            tableObj.searchInput.on('input',\r\n                function() {\r\n                    var term = $(this).val()\r\n                        .toLowerCase();\r\n                    $('tr', tableObj.body).each(\r\n                        function() {\r\n                            var text = $(\r\n                                    this)\r\n                                .text()\r\n                                .toLowerCase();\r\n                            $(this).toggle(\r\n                                text\r\n                                .indexOf(\r\n                                    term\r\n                                ) >\r\n                                -1);\r\n                        });\r\n                });\r\n        })(self.ctx.tables[i]);\r\n    }\r\n\r\n    self.onResize();\r\n};\r\n\r\n\r\n\r\nfunction hasMeaningfulValue(v) {\r\n    if (v === null || v === undefined) return false;\r\n    if (typeof v === 'number') return isFinite(v); // keep 0\r\n    if (typeof v === 'boolean')\r\n        return true; // keep false/true\r\n    if (typeof v === 'string') {\r\n        var s = v.trim();\r\n        if (!s) return false; // \"\", \"   \"\r\n        if (s === '-' || s === '‚Äî')\r\n            return false; // common placeholders\r\n        if (s.toLowerCase() === 'null' || s\r\n            .toLowerCase() === 'undefined') return false;\r\n        return true;\r\n    }\r\n    // objects/arrays: keep non-empty ones\r\n    try {\r\n        var s = JSON.stringify(v);\r\n        return s && s !== '{}' && s !== '[]';\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nself.onResize = function() {\r\n    var widgetHeight = self.ctx.height || self.ctx\r\n        .$container.height();\r\n    var count = Math.max(self.ctx.datasources.length,\r\n        1);\r\n    var perHeight = Math.floor(widgetHeight / count);\r\n\r\n    // Apply height to every scroll container\r\n    $('.tb-scroll-container', self.ctx.$container).css({\r\n        height: perHeight + 'px',\r\n        maxHeight: perHeight + 'px'\r\n    });\r\n};\r\n\r\n\r\n// Store per-datasource max values\r\n\r\n\r\n// üü¢ When new data arrives\r\nself.onDataUpdated = function() {\r\n    // First pass: find max per datasource\r\n    self.ctx.maxValues = [];\r\n    for (var i = 0; i < self.ctx.data.length; i++) {\r\n        var cellData = self.ctx.data[i];\r\n        if (!cellData || !cellData.data || !cellData\r\n            .data.length) continue;\r\n\r\n        var raw = cellData.data[cellData.data.length -\r\n            1][1];\r\n        var dsIndex = (cellData.datasourceIndex !=\r\n            null) ? cellData.datasourceIndex : 0;\r\n\r\n        if (typeof raw === 'number' && isFinite(raw)) {\r\n            if (self.ctx.maxValues[dsIndex] == null ||\r\n                raw > self.ctx.maxValues[dsIndex]) {\r\n                self.ctx.maxValues[dsIndex] = raw;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Second pass: render rows\r\n    for (var i = 0; i < self.ctx.data.length; i++) {\r\n        var cellData = self.ctx.data[i];\r\n        if (!cellData || !cellData.data || !cellData\r\n            .data.length) continue;\r\n\r\n        var tvPair = cellData.data[cellData.data\r\n            .length - 1];\r\n        var raw = tvPair[1];\r\n        var dsIndex = (cellData.datasourceIndex !=\r\n            null) ? cellData.datasourceIndex : 0;\r\n        var key = cellData.dataKey.label || cellData\r\n            .dataKey.name;\r\n        var table = self.ctx.tables[dsIndex];\r\n        if (!table) continue;\r\n\r\n        if (!hasMeaningfulValue(raw)) {\r\n            if (table.rows[key]) {\r\n                table.rows[key].closest('tr').remove();\r\n                delete table.rows[key];\r\n            }\r\n            continue;\r\n        }\r\n\r\n        var txt;\r\n        if (typeof raw === 'number' && isFinite(raw)) {\r\n            var maxVal = self.ctx.maxValues[dsIndex] ||\r\n                1; // avoid div by 0\r\n            var percent = Math.max(0, Math.min(100, (\r\n                raw / maxVal) * 100));\r\n\r\n            // build bar\r\n            txt = '<div class=\"bar-container\">' +\r\n    '<div class=\"bar-fill\" style=\"width:' + percent + '%; ' +\r\n    'background: linear-gradient(90deg, ' + self.ctx.colorA + ', ' + self.ctx.colorB + ');\"></div>' +\r\n    '<span class=\"bar-label\">' + raw + '</span>' +\r\n    '</div>';\r\n\r\n        } else if (typeof raw === 'object') {\r\n            try {\r\n                txt = JSON.stringify(raw);\r\n            } catch (e) {\r\n                txt = String(raw);\r\n            }\r\n        } else {\r\n            txt = String(raw);\r\n        }\r\n\r\n        if (!table.rows[key]) {\r\n            var safeId = 'row_' + dsIndex + '_' + key\r\n                .replace(/[^\\w-]/g, '_');\r\n            var $row = $(\r\n                \"<tr class='mat-row' id='\" +\r\n                safeId + \"'>\" +\r\n                \"<td class='mat-cell key-cell'>\" +\r\n                key + \"</td>\" +\r\n                \"<td class='mat-cell value-cell'></td>\" +\r\n                \"</tr>\"\r\n            );\r\n            table.body.append($row);\r\n            table.rows[key] = $row.find('.value-cell');\r\n        }\r\n\r\n        table.rows[key].html(txt);\r\n    }\r\n};",
      "settingsForm" : [ {
        "id" : "color_a",
        "name" : "Color A",
        "group" : "Color",
        "type" : "color",
        "default" : "#000",
        "required" : false
      }, {
        "id" : "color_b",
        "name" : "Color B",
        "group" : "Color",
        "type" : "color",
        "default" : "#000"
      } ],
      "dataKeySettingsForm" : [ ],
      "hasBasicMode" : false,
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.8416510464473642,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.9656098086761837,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"color_a\":\"#4CAF50\",\"color_b\":\"#A5D7A7\"},\"title\":\"Attributes card\",\"decimals\":null,\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"widgetCss\":\".tb-widget .tb-widget-header {\\r\\n  position: absolute !important;\\r\\n  background: transparent !important;    /* solid background so it covers content */\\r\\n}\",\"titleStyle\":{\"fontSize\":\"24px\",\"fontWeight\":700,\"padding\":\"5px 10px 10px 5px\"},\"pageSize\":1024,\"noDataDisplayMessage\":\"\"}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "a2d944b0-928c-11f0-a61c-01e0c85fd5dd"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}