{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "custom_gauge",
    "name" : "Custom Gauge",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 5,
      "resources" : [ {
        "url" : "https://test-thingsboard-oficina.s3.us-east-1.amazonaws.com/d3.v7.min.js"
      } ],
      "templateHtml" : "<div class=\"gauge-container\">\r\n  <svg id=\"gaugeChart\" class=\"gauge-svg\"></svg>\r\n  <div id=\"gaugeValue\" class=\"gauge-value\"></div>\r\n</div>",
      "templateCss" : ".gauge-container {\r\n  --gauge-color: #00C853;\r\n  --gauge-bg-color: rgba(150,150,150,0.15);\r\n  --gauge-font-size: 2.4em;\r\n  --gauge-font-weight: 700;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: transparent;\r\n  color: inherit;\r\n}\r\n\r\n.gauge-svg {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n/* Fondo del gauge */\r\n.gauge-bg {\r\n  fill: none;\r\n  stroke: var(--gauge-bg-color);\r\n  stroke-width: 18px;\r\n  stroke-linecap: round;\r\n}\r\n\r\n/* Barra de progreso */\r\n.gauge-progress {\r\n  fill: none;\r\n  stroke: var(--gauge-color);\r\n  stroke-width: 18px;\r\n  stroke-linecap: round;\r\n  transition: stroke 0.3s ease;\r\n}\r\n\r\n/* Valor central */\r\n.gauge-value {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-size: var(--gauge-font-size);\r\n  font-weight: var(--gauge-font-weight);\r\n  color: #212121;\r\n  text-align: center;\r\n  pointer-events: none;\r\n}\r\n",
      "controllerScript" : "self.onInit = function () {\r\n  const ctx = self.ctx;\r\n\r\n  ctx.parameter = ctx.settings.parameter || 'progress';\r\n  ctx.minValue = ctx.settings.minValue || 0;\r\n  ctx.maxValue = ctx.settings.maxValue || 100;\r\n  ctx.unit = ctx.settings.unit || '%';\r\n\r\n  // Container base\r\n  ctx.$container.html(`\r\n    <div class=\"gauge-container\">\r\n      <svg id=\"gaugeChart\" class=\"gauge-svg\"></svg>\r\n      <div id=\"gaugeValue\" class=\"gauge-value\"></div>\r\n    </div>\r\n  `);\r\n};\r\n\r\nself.onDataUpdated = function () {\r\n  const ctx = self.ctx;\r\n  const data = ctx.data;\r\n  if (!data?.length || !data[0].data?.length) return;\r\n\r\n  const raw = data[0].data[data[0].data.length - 1][1];\r\n  const val = Math.max(ctx.minValue, Math.min(ctx.maxValue, raw));\r\n\r\n  const container = ctx.$container.find(\".gauge-container\")[0];\r\n  const width = container.offsetWidth || 200;\r\n  const height = container.offsetHeight || 200;\r\n  const cx = width / 2;\r\n  const cy = height / 2;\r\n\r\n  const radius = Math.min(width, height) / 2.6;\r\n  const thickness = 18;\r\n\r\n  const color = getComputedStyle(container).getPropertyValue('--gauge-color').trim() || '#00C853';\r\n  const bgColor = getComputedStyle(container).getPropertyValue('--gauge-bg-color').trim() || 'rgba(150,150,150,0.15)';\r\n\r\n  const svg = d3.select(container).select(\"#gaugeChart\");\r\n  svg.selectAll(\"*\").remove();\r\n  svg.attr(\"width\", width).attr(\"height\", height);\r\n\r\n  const scale = d3.scaleLinear().domain([ctx.minValue, ctx.maxValue]).range([0, 2 * Math.PI]);\r\n  const angle = scale(val);\r\n  const startAngle = -Math.PI / 2;\r\n  const endAngle = startAngle + angle;\r\n\r\n  function polar(cx, cy, r, angle) {\r\n    return { x: cx + r * Math.cos(angle), y: cy + r * Math.sin(angle) };\r\n  }\r\n\r\n  // Background circle\r\n  svg.append(\"circle\")\r\n    .attr(\"class\", \"gauge-bg\")\r\n    .attr(\"cx\", cx)\r\n    .attr(\"cy\", cy)\r\n    .attr(\"r\", radius);\r\n\r\n  // Foreground arc (progress)\r\n  if (angle > 1e-6) {\r\n    if (angle >= 2 * Math.PI - 1e-6) {\r\n      svg.append(\"circle\")\r\n        .attr(\"class\", \"gauge-progress\")\r\n        .attr(\"cx\", cx)\r\n        .attr(\"cy\", cy)\r\n        .attr(\"r\", radius);\r\n    } else {\r\n      const start = polar(cx, cy, radius, startAngle);\r\n      const end = polar(cx, cy, radius, endAngle);\r\n      const largeArc = angle > Math.PI ? 1 : 0;\r\n\r\n      const d = `M ${start.x} ${start.y} A ${radius} ${radius} 0 ${largeArc} 1 ${end.x} ${end.y}`;\r\n      svg.append(\"path\")\r\n        .attr(\"class\", \"gauge-progress\")\r\n        .attr(\"d\", d);\r\n    }\r\n  }\r\n\r\n  // Update central value\r\n  ctx.$container.find(\"#gaugeValue\").text(`${val.toFixed(0)}${ctx.unit}`);\r\n};\r\n\r\nself.onResize = function () {\r\n  self.onDataUpdated();\r\n};\r\n",
      "settingsForm" : [ ],
      "dataKeySettingsForm" : [ ],
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.2096290420088125,\"funcBody\":\"var value = prevValue + Math.random() * 100;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * 50) / multiplier;\\nif (value < -100) {\\n\\tvalue = -100;\\n} else if (value > 100) {\\n\\tvalue = 100;\\n}\\nreturn value;\",\"aggregationType\":null,\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Attributes card\",\"decimals\":null,\"useDashboardTimewindow\":true,\"displayTimewindow\":true}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "17b8b5f0-a560-11f0-9abe-2dfd6db9cae3"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}