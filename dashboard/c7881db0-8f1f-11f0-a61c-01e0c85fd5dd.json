{
  "entityType" : "DASHBOARD",
  "entity" : {
    "title" : "Admin Panel",
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "6092e31e-a9b7-7a25-a026-dc7ccb105df4" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1754672005797,
                  "endTimeMs" : 1754758405797
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Usuarios",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "entityNameColumnTitle" : "",
              "displayEntityLabel" : false,
              "entityLabelColumnTitle" : "",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "pageStepCount" : 3,
              "pageStepIncrement" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "Lista de usuarios",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "24px",
              "fontWeight" : 700,
              "padding" : "5px 10px 5px 5px",
              "height" : "28px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "66648982-96c8-3140-1f78-86564ffbea8c",
              "filterId" : "e1647e6f-faae-00bb-4008-6163a5163284",
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.7466669558570668
              }, {
                "name" : "email",
                "type" : "entityField",
                "label" : "Email",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.2994408019546888
              }, {
                "name" : "firstName",
                "type" : "entityField",
                "label" : "First name",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.8774543295177568
              }, {
                "name" : "lastName",
                "type" : "entityField",
                "label" : "Last name",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.5894745228836846
              }, {
                "name" : "phone",
                "type" : "entityField",
                "label" : "Phone",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.6730739369191564
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "actionCellButton" : [ {
                "name" : "edit",
                "icon" : "edit",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "openRightLayout" : false,
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "id" : "3b218466-4cd8-b175-5a3f-9c0334fe54cb"
              }, {
                "name" : "dlelete",
                "icon" : "delete",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "openRightLayout" : false,
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "id" : "214894b0-11a5-f87f-f000-90003cdd316a"
              } ],
              "headerButton" : [ {
                "name" : "add user",
                "buttonType" : "icon",
                "icon" : "add",
                "buttonColor" : "rgba(0, 0, 0, 0.87)",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addUserForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\" (ngSubmit)=\"save()\" class=\"add-user-form\">\r\n\r\n    <mat-toolbar color=\"primary\">\r\n        <h2>Registrar Usuario</h2>\r\n        <span class=\"flex-1\"></span>\r\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n    </mat-toolbar>\r\n\r\n    <div mat-dialog-content style=\"padding: 24px;\">\r\n        <mat-form-field appearance=\"fill\" class=\"mat-block\" style=\"width: 100%;\">\r\n            <mat-label>Email</mat-label>\r\n            <input matInput formControlName=\"email\" required>\r\n            <mat-error *ngIf=\"addEntityFormGroup.get('email').hasError('required')\">\r\n                Campo obligatorio.\r\n            </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"mat-block\" style=\"width: 100%;\">\r\n            <mat-label>Nombre</mat-label>\r\n            <input matInput formControlName=\"firstName\">\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"mat-block\" style=\"width: 100%;\">\r\n            <mat-label>Apellido</mat-label>\r\n            <input matInput formControlName=\"lastName\">\r\n        </mat-form-field>\r\n    </div>\r\n\r\n    <mat-divider style=\"width: 100%;\"></mat-divider>\r\n\r\n    <div mat-dialog-actions style=\"padding: 8px;\" class=\"flex flex-row justify-end\">\r\n        <button mat-button type=\"button\" (click)=\"cancel()\">Cancelar</button>\r\n        <button mat-raised-button color=\"primary\" type=\"submit\"\r\n                [disabled]=\"addUserForm.invalid || (isLoading$ | async)\">\r\n            Crear\r\n        </button>\r\n    </div>\r\n</form>\r\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\r\n\r\nopenAddUserDialog();\r\n\r\nfunction openAddUserDialog() {\r\n    customDialog.customDialog(htmlTemplate, AddUserDialogController).subscribe();\r\n}\r\n\r\nfunction AddUserDialogController(instance) {\r\n    let vm = instance;\r\n\r\n    vm.addEntityFormGroup = vm.fb.group({\r\n        email: ['', [vm.validators.required, vm.validators.email]],\r\n        firstName: [''],\r\n        lastName: ['']\r\n    });\r\n\r\n    vm.cancel = function () {\r\n        vm.dialogRef.close(null);\r\n    };\r\n\r\n    vm.save = function () {\r\n        vm.addEntityFormGroup.markAsPristine();\r\n\r\n        const formValues = vm.addEntityFormGroup.value;\r\n\r\n        // ID del cliente \"Usuarios\", debe ser hardcoded (ajusta este ID real desde tu plataforma)\r\n        const customerId = {\r\n            entityType: 'CUSTOMER',\r\n            id: 'c9a39b70-7317-11f0-9e5f-db09c3cbe3c9'  // <- AJUSTA ESTE ID A TU CASO\r\n        };\r\n\r\n        const tenantId = {\r\n            entityType: 'TENANT',\r\n            id: widgetContext.currentUser.userId\r\n        };\r\n        //const tenantId = widgetContext.currentUser.user.tenantId;\r\n\r\n        const user = {\r\n            email: formValues.email,\r\n            firstName: formValues.firstName,\r\n            lastName: formValues.lastName,\r\n            authority: 'CUSTOMER_USER',\r\n            customerId,\r\n            tenantId,\r\n            additionalInfo: {\r\n                description: \"\",\r\n                defaultDashboardId: \"9cf20700-6f1c-11f0-9e5f-db09c3cbe3c9\",\r\n                defaultDashboardFullscreen: true,\r\n                homeDashboardId: null,\r\n                homeDashboardHideToolbar: true,\r\n                userCredentialsEnabled: true,\r\n                userActivated: true\r\n            }\r\n        };\r\n\r\n        userService.saveUser(user, true).subscribe({\r\n            next: function (savedUser) {\r\n                widgetContext.showSuccessToast('Usuario creado y correo de activación enviado.');\r\n                widgetContext.updateAliases();\r\n                vm.dialogRef.close(savedUser);\r\n            },\r\n            error: function (err) {\r\n                widgetContext.showErrorToast('Error al crear usuario: ' + err.message);\r\n            }\r\n        });\r\n    };\r\n}\r\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "93be0f33-249b-a8fa-8b73-ade821ba4553"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "titleTooltip" : "",
            "widgetStyle" : { },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "6092e31e-a9b7-7a25-a026-dc7ccb105df4"
        },
        "c55ab5f4-62ee-c8d0-7cd0-29df4556bfd5" : {
          "type" : "latest",
          "sizeX" : 5,
          "sizeY" : 3.5,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1682924137231,
                  "endTimeMs" : 1683010537231
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 2500
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "useMarkdownTextFunction" : true,
              "markdownTextPattern" : "# Markdown/HTML card \\n - **Current entity**: **${entityName}**. \\n - **Current value**: **${Random}**.",
              "markdownTextFunction" : "\nvar darkMode = $('.tb-dashboard-page').hasClass('dark');\nvar darkModeExpression = darkMode ? '(darkMode !== false)' : 'darkMode';\n\nreturn '<div class=\"header flex flex-col items-center justify-around gt-sm:flex-row gt-sm:items-stretch gt-sm:justify-start gt-sm:gap-6\">' +\n        '<div class=\"flex flex-col items-stretch justify-center\">' +\n           '<div class=\"title\">Huella Hidrica</div>' +\n        '</div>' +\n        '<div class=\"flex flex-col gt-sm:flex-1 items-center justify-around gap-4 gt-sm:flex-row gt-sm:gap-2 gt-sm:items-center gt-sm:justify-start\">' +\n           '<div class=\"powered-by\">Smart water monitoring</div>' +\n        '</div>' +\n        '<div class=\"flex flex-col items-stretch justify-center\" style=\"padding-right: 24px;\">' +\n            '<button (click)=\"darkMode = '+darkModeExpression+' ? false : true\" id=\"dark-mode-switch\" mat-icon-button matTooltip=\"{{ '+ darkModeExpression +' ? &quot;Switch to light mode&quot; : &quot;Switch to dark mode&quot; }}\"><mat-icon>{{ '+ darkModeExpression +' ? &quot;light_mode&quot; : &quot;dark_mode&quot; }}</mat-icon></button>' +\n        '</div>' +\n    '</div>';\n    ",
              "applyDefaultMarkdownStyle" : false,
              "markdownCss" : ".header {\n    height: 100%;\n    padding: 0 0 0 24px;\n    justify-content: space-around;\n}\n\n@media (min-width: 960px) {\n    .header {\n        gap: 24px;\n    }\n}\n\n.header .mat-icon.title-icon {\n    width: 40px;\n    height: 40px;\n}\n\n.header .title {\n    font-size: 24px;\n    font-weight: 500;\n    color: #28232D;\n}\n\n.header .subtitle {\n    font-size: 13px;\n    font-weight: normal;\n    color: #757575;\n}\n"
            },
            "title" : "New Markdown/HTML Card",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "widgetCss" : ".tb-markdown-view a:hover {\n    text-decoration: none;\n}",
            "noDataDisplayMessage" : "",
            "actions" : {
              "elementClick" : [ {
                "name" : "dark-mode-switch",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "$('.tb-dashboard-page').toggleClass('dark');",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "fd666ec9-cd5a-af01-47e1-b7e53911f87a"
              }, {
                "name" : "try-it-now",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "localStorage.removeItem('jwt_token');\nlocalStorage.removeItem('jwt_token_expiration');\nlocalStorage.removeItem('refresh_token');\nlocalStorage.removeItem('refresh_token_expiration');\nwindow.open('https://demo.thingsboard.io/signup', '_blank');\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "f6422a64-4cd4-506d-d03e-fafbf62db69b"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "c55ab5f4-62ee-c8d0-7cd0-29df4556bfd5",
          "typeFullFqn" : "system.cards.markdown_card"
        },
        "6711863a-8014-2a26-7df8-9949e9530eec" : {
          "typeFullFqn" : "system.entity_admin_widgets.device_admin_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1754673985962,
                  "endTimeMs" : 1754760385962
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Dispositivos",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "entityNameColumnTitle" : "",
              "displayEntityLabel" : false,
              "entityLabelColumnTitle" : "",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "pageStepCount" : 3,
              "pageStepIncrement" : 10,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "Dispositivos",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "24px",
              "fontWeight" : 700,
              "padding" : "5px 10px 5px 5px",
              "height" : "28px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "1b4e8b88-87f0-01bf-a46a-5c9b373a3bab",
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.8145253766768086
              }, {
                "name" : "label",
                "type" : "entityField",
                "label" : "Label",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.33510629029162964
              }, {
                "name" : "type",
                "type" : "entityField",
                "label" : "Type",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.42171857011769387
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "showTitleIcon" : false,
            "titleIcon" : "more_horiz",
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : { },
            "displayTimewindow" : true,
            "actions" : {
              "headerButton" : [ {
                "name" : "Add device",
                "icon" : "add",
                "type" : "customPretty",
                "customHtml" : "<form #addDeviceForm=\"ngForm\" [formGroup]=\"addDeviceFormGroup\"\n      (ngSubmit)=\"save()\" style=\"width: 480px;\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>Add device</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button\n            (click)=\"cancel()\"\n            type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content>\n    <div class=\"mat-padding flex flex-col\">\n      <mat-form-field class=\"mat-block\">\n        <mat-label>Device name</mat-label>\n        <input matInput formControlName=\"deviceName\" required>\n        <mat-error *ngIf=\"addDeviceFormGroup.get('deviceName').hasError('required')\">\n          Device name is required.\n        </mat-error>\n      </mat-form-field>\n      <div class=\"flex flex-row gap-2\">\n        <tb-entity-subtype-autocomplete\n            class=\"max-w-50% flex-full\"\n            formControlName=\"deviceType\"\n            [required]=\"true\"\n            [entityType]=\"'DEVICE'\"\n        ></tb-entity-subtype-autocomplete>\n        <mat-form-field class=\"mat-block max-w-50% flex-full\">\n          <mat-label>Label</mat-label>\n          <input matInput formControlName=\"deviceLabel\">\n        </mat-form-field>\n      </div>\n      <div formGroupName=\"attributes\" class=\"flex flex-row gap-2\">\n        <mat-form-field class=\"mat-block max-w-50% flex-full\">\n          <mat-label>Latitude</mat-label>\n          <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">\n        </mat-form-field>\n        <mat-form-field class=\"mat-block max-w-50% flex-full\">\n          <mat-label>Longitude</mat-label>\n          <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">\n        </mat-form-field>\n      </div>\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row\">\n    <span class=\"flex-1\"></span>\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            style=\"margin-right: 20px;\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addDeviceForm.invalid || !addDeviceForm.dirty\">\n      Create\n    </button>\n  </div>\n</form>\n",
                "customCss" : "",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenAddDeviceDialog();\n\nfunction openAddDeviceDialog() {\n    customDialog.customDialog(htmlTemplate, AddDeviceDialogController).subscribe();\n}\n\nfunction AddDeviceDialogController(instance) {\n    let vm = instance;\n    \n    vm.addDeviceFormGroup = vm.fb.group({\n      deviceName: ['', [vm.validators.required]],\n      deviceType: ['', [vm.validators.required]],\n      deviceLabel: [''],\n      attributes: vm.fb.group({\n          latitude: [null],\n          longitude: [null]\n      })      \n    });\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    vm.save = function() {\n        vm.addDeviceFormGroup.markAsPristine();\n        let device = {\n            name: vm.addDeviceFormGroup.get('deviceName').value,\n            type: vm.addDeviceFormGroup.get('deviceType').value,\n            label: vm.addDeviceFormGroup.get('deviceLabel').value\n        };\n        deviceService.saveDevice(device).subscribe(\n            function (device) {\n                saveAttributes(device.id).subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n    \n    function saveAttributes(entityId) {\n        let attributes = vm.addDeviceFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            attributesArray.push({key: key, value: attributes[key]});\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources" : [ ],
                "id" : "70837a9d-c3de-a9a7-03c5-dccd14998758"
              } ],
              "actionCellButton" : [ {
                "name" : "copy access token",
                "icon" : "content_copy",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "openRightLayout" : false,
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "id" : "f5f685bf-5b9f-6fcb-a1cd-d9f09e4d89e7"
              }, {
                "name" : "Edit device",
                "icon" : "edit",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editDeviceForm=\"ngForm\" [formGroup]=\"editDeviceFormGroup\"\n      (ngSubmit)=\"save()\" style=\"width: 480px;\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>Edit device</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button\n            (click)=\"cancel()\"\n            type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content>\n    <div class=\"mat-padding flex flex-col\">\n      <mat-form-field class=\"mat-block\">\n        <mat-label>Device name</mat-label>\n        <input matInput formControlName=\"deviceName\" required>\n        <mat-error *ngIf=\"editDeviceFormGroup.get('deviceName').hasError('required')\">\n          Device name is required.\n        </mat-error>\n      </mat-form-field>\n      <div class=\"flex flex-row gap-2\">\n        <tb-entity-subtype-autocomplete\n            class=\"max-w-50% flex-full\"\n            formControlName=\"deviceType\"\n            [required]=\"true\"\n            [entityType]=\"'DEVICE'\"\n        ></tb-entity-subtype-autocomplete>\n        <mat-form-field class=\"mat-block max-w-50% flex-full\">\n          <mat-label>Label</mat-label>\n          <input matInput formControlName=\"deviceLabel\">\n        </mat-form-field>\n      </div>\n      <div formGroupName=\"attributes\" class=\"flex flex-row gap-2\">\n        <mat-form-field class=\"mat-block max-w-50% flex-full\">\n          <mat-label>Latitude</mat-label>\n          <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">\n        </mat-form-field>\n        <mat-form-field class=\"mat-block max-w-50% flex-full\">\n          <mat-label>Longitude</mat-label>\n          <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">\n        </mat-form-field>\n      </div>\n    </div>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row\">\n    <span class=\"flex-1\"></span>\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            style=\"margin-right: 20px;\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editDeviceForm.invalid || !editDeviceForm.dirty\">\n      Update\n    </button>\n  </div>\n</form>\n",
                "customCss" : "",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditDeviceDialog();\n\nfunction openEditDeviceDialog() {\n    customDialog.customDialog(htmlTemplate, EditDeviceDialogController).subscribe();\n}\n\nfunction EditDeviceDialogController(instance) {\n    let vm = instance;\n    \n    vm.device = null;\n    vm.attributes = {};\n    \n    vm.editDeviceFormGroup = vm.fb.group({\n      deviceName: ['', [vm.validators.required]],\n      deviceType: ['', [vm.validators.required]],\n      deviceLabel: [''],\n      attributes: vm.fb.group({\n          latitude: [null],\n          longitude: [null]\n      })      \n    });\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    vm.save = function() {\n        vm.editDeviceFormGroup.markAsPristine();\n        if (vm.editDeviceFormGroup.get('deviceType').value !== vm.device.type) {\n            delete vm.device.deviceProfileId;\n        }\n        vm.device.name = vm.editDeviceFormGroup.get('deviceName').value,\n        vm.device.type = vm.editDeviceFormGroup.get('deviceType').value,\n        vm.device.label = vm.editDeviceFormGroup.get('deviceLabel').value\n        deviceService.saveDevice(vm.device).subscribe(\n            function () {\n                saveAttributes().subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n    \n    getEntityInfo();\n    \n    function getEntityInfo() {\n        deviceService.getDevice(entityId.id).subscribe(\n            function (device) {\n                attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE',\n                                                    ['latitude', 'longitude']).subscribe(\n                   function (attributes) {\n                        for (let i = 0; i < attributes.length; i++) {\n                            vm.attributes[attributes[i].key] = attributes[i].value; \n                        }\n                        vm.device = device;\n                        vm.editDeviceFormGroup.patchValue(\n                            {\n                                deviceName: vm.device.name,\n                                deviceType: vm.device.type,\n                                deviceLabel: vm.device.label,\n                                attributes: {\n                                    latitude: vm.attributes.latitude,\n                                    longitude: vm.attributes.longitude\n                                }\n                            }, {emitEvent: false}\n                        );\n                   } \n                );\n            }\n        );    \n    }\n    \n    function saveAttributes() {\n        let attributes = vm.editDeviceFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            attributesArray.push({key: key, value: attributes[key]});\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, 'SERVER_SCOPE', attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "93931e52-5d7c-903e-67aa-b9435df44ff4"
              }, {
                "name" : "upload image",
                "icon" : "mdi:image-plus",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "openRightLayout" : false,
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "id" : "1a4bdae7-eb8c-a912-7614-c1597960a316"
              }, {
                "name" : "Delete device",
                "icon" : "delete",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenDeleteDeviceDialog();\n\nfunction openDeleteDeviceDialog() {\n    let title = \"Are you sure you want to delete the device \" + entityName +  \"?\";\n    let content = \"Be careful, after the confirmation, the device and all related data will become unrecoverable!\";\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function (result) {\n            if (result) {\n                deleteDevice();\n            }\n        }\n    );\n}\n\nfunction deleteDevice() {\n    deviceService.deleteDevice(entityId.id).subscribe(\n        function () {\n            widgetContext.updateAliases();\n        }\n    );\n}\n",
                "id" : "ec2708f6-9ff0-186b-e4fc-7635ebfa3074"
              } ]
            },
            "configMode" : "advanced",
            "titleFont" : null,
            "titleColor" : null,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "6711863a-8014-2a26-7df8-9949e9530eec"
        },
        "cdc1b1ab-8634-bcf0-26ba-a2bc1e1744cc" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1754672005797,
                  "endTimeMs" : 1754758405797
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Administradores",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "entityNameColumnTitle" : "",
              "displayEntityLabel" : false,
              "entityLabelColumnTitle" : "",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "pageStepCount" : 3,
              "pageStepIncrement" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "Lista de usuarios",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "24px",
              "fontWeight" : 700,
              "padding" : "5px 10px 5px 5px",
              "height" : "28px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "66648982-96c8-3140-1f78-86564ffbea8c",
              "filterId" : "e8ae092f-7398-6244-cfe4-37c73fc9dfd8",
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.7466669558570668
              }, {
                "name" : "email",
                "type" : "entityField",
                "label" : "Email",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.2994408019546888
              }, {
                "name" : "firstName",
                "type" : "entityField",
                "label" : "First name",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.8774543295177568
              }, {
                "name" : "lastName",
                "type" : "entityField",
                "label" : "Last name",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.5894745228836846
              }, {
                "name" : "phone",
                "type" : "entityField",
                "label" : "Phone",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.6730739369191564
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : {
              "actionCellButton" : [ {
                "name" : "Copiar link de activación",
                "icon" : "link",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "widgetContext.userService.getActivationLink(entityId.id).subscribe({\r\n  next: (link) => {\r\n    // 1. Copy to clipboard\r\n    navigator.clipboard.writeText(link).then(() => {\r\n      // 2. Show success toast\r\n      widgetContext.showSuccessToast(`Activation link copied: ${link}`);\r\n    }).catch(err => {\r\n      console.error('Clipboard copy failed', err);\r\n    });\r\n  },\r\n  error: (err) => {\r\n    console.error('Error fetching activation link:', err);\r\n  }\r\n});\r\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "d728025f-4ac6-b45c-eff9-0f8f3a6a1ca2"
              }, {
                "name" : "Enviar link de activación",
                "icon" : "mdi:email-arrow-right",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "widgetContext.userService.sendActivationEmail(additionalParams.entity.Email).subscribe({\r\n  next: () => {\r\n    widgetContext.showSuccessToast(`Activation email sent to ${additionalParams.entity.Email}`);\r\n  },\r\n  error: (err) => {\r\n    console.error('Error sending activation email:', err);\r\n  }\r\n});\r\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "da83abdc-f87d-4f9b-857a-07cbd709b6f6"
              } ],
              "headerButton" : [ {
                "name" : "add user",
                "buttonType" : "icon",
                "icon" : "add",
                "buttonColor" : "rgba(0, 0, 0, 0.87)",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addUserForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\" (ngSubmit)=\"save()\" class=\"add-user-form\">\r\n\r\n    <mat-toolbar color=\"primary\">\r\n        <h2>Registrar Usuario</h2>\r\n        <span class=\"flex-1\"></span>\r\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n    </mat-toolbar>\r\n\r\n    <div mat-dialog-content style=\"padding: 24px;\">\r\n        <mat-form-field appearance=\"fill\" class=\"mat-block\" style=\"width: 100%;\">\r\n            <mat-label>Email</mat-label>\r\n            <input matInput formControlName=\"email\" required>\r\n            <mat-error *ngIf=\"addEntityFormGroup.get('email').hasError('required')\">\r\n                Campo obligatorio.\r\n            </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"mat-block\" style=\"width: 100%;\">\r\n            <mat-label>Nombre</mat-label>\r\n            <input matInput formControlName=\"firstName\">\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"mat-block\" style=\"width: 100%;\">\r\n            <mat-label>Apellido</mat-label>\r\n            <input matInput formControlName=\"lastName\">\r\n        </mat-form-field>\r\n    </div>\r\n\r\n    <mat-divider style=\"width: 100%;\"></mat-divider>\r\n\r\n    <div mat-dialog-actions style=\"padding: 8px;\" class=\"flex flex-row justify-end\">\r\n        <button mat-button type=\"button\" (click)=\"cancel()\">Cancelar</button>\r\n        <button mat-raised-button color=\"primary\" type=\"submit\"\r\n                [disabled]=\"addUserForm.invalid || (isLoading$ | async)\">\r\n            Crear\r\n        </button>\r\n    </div>\r\n</form>\r\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\r\n\r\nopenAddUserDialog();\r\n\r\nfunction openAddUserDialog() {\r\n    customDialog.customDialog(htmlTemplate, AddUserDialogController).subscribe();\r\n}\r\n\r\nfunction AddUserDialogController(instance) {\r\n    let vm = instance;\r\n\r\n    vm.addEntityFormGroup = vm.fb.group({\r\n        email: ['', [vm.validators.required, vm.validators.email]],\r\n        firstName: [''],\r\n        lastName: ['']\r\n    });\r\n\r\n    vm.cancel = function () {\r\n        vm.dialogRef.close(null);\r\n    };\r\n\r\n    vm.save = function () {\r\n        vm.addEntityFormGroup.markAsPristine();\r\n\r\n        const formValues = vm.addEntityFormGroup.value;\r\n\r\n        // ID del cliente \"Usuarios\", debe ser hardcoded (ajusta este ID real desde tu plataforma)\r\n        const customerId = {\r\n            entityType: 'CUSTOMER',\r\n            id: 'c9a39b70-7317-11f0-9e5f-db09c3cbe3c9'  // <- AJUSTA ESTE ID A TU CASO\r\n        };\r\n\r\n        const tenantId = {\r\n            entityType: 'TENANT',\r\n            id: widgetContext.currentUser.userId\r\n        };\r\n        //const tenantId = widgetContext.currentUser.user.tenantId;\r\n\r\n        const user = {\r\n            email: formValues.email,\r\n            firstName: formValues.firstName,\r\n            lastName: formValues.lastName,\r\n            authority: 'TENANT_ADMIN',\r\n            tenantId,\r\n            additionalInfo: {\r\n                description: \"\",\r\n                defaultDashboardId: \"9cf20700-6f1c-11f0-9e5f-db09c3cbe3c9\",\r\n                defaultDashboardFullscreen: true,\r\n                homeDashboardId: null,\r\n                homeDashboardHideToolbar: true,\r\n                userCredentialsEnabled: true,\r\n                userActivated: true\r\n            }\r\n        };\r\n\r\n        userService.saveUser(user, true).subscribe({\r\n            next: function (savedUser) {\r\n                widgetContext.showSuccessToast('Usuario creado y correo de activación enviado.');\r\n                widgetContext.updateAliases();\r\n                vm.dialogRef.close(savedUser);\r\n            },\r\n            error: function (err) {\r\n                widgetContext.showErrorToast('Error al crear usuario: ' + err.message);\r\n            }\r\n        });\r\n    };\r\n}\r\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "93be0f33-249b-a8fa-8b73-ade821ba4553"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "titleTooltip" : "",
            "widgetStyle" : { },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "cdc1b1ab-8634-bcf0-26ba-a2bc1e1744cc"
        }
      },
      "states" : {
        "default" : {
          "name" : "Usuarios",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "6092e31e-a9b7-7a25-a026-dc7ccb105df4" : {
                  "sizeX" : 12,
                  "sizeY" : 7,
                  "row" : 6,
                  "col" : 0
                },
                "c55ab5f4-62ee-c8d0-7cd0-29df4556bfd5" : {
                  "sizeX" : 24,
                  "sizeY" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 0
                },
                "6711863a-8014-2a26-7df8-9949e9530eec" : {
                  "sizeX" : 12,
                  "sizeY" : 12,
                  "row" : 1,
                  "col" : 12
                },
                "cdc1b1ab-8634-bcf0-26ba-a2bc1e1744cc" : {
                  "sizeX" : 12,
                  "sizeY" : 5,
                  "row" : 1,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "layoutType" : "default",
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "minColumns" : 24,
                "viewFormat" : "grid",
                "autoFillHeight" : true,
                "rowHeight" : 70,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70
              }
            }
          }
        }
      },
      "entityAliases" : {
        "66648982-96c8-3140-1f78-86564ffbea8c" : {
          "id" : "66648982-96c8-3140-1f78-86564ffbea8c",
          "alias" : "Users",
          "filter" : {
            "type" : "entityType",
            "resolveMultiple" : true,
            "entityType" : "USER"
          }
        },
        "3ad20746-7773-5921-f75a-bfbe64eb31bf" : {
          "id" : "3ad20746-7773-5921-f75a-bfbe64eb31bf",
          "alias" : "tenant",
          "filter" : {
            "type" : "entityType",
            "resolveMultiple" : true,
            "entityType" : "CUSTOMER"
          }
        },
        "1b4e8b88-87f0-01bf-a46a-5c9b373a3bab" : {
          "id" : "1b4e8b88-87f0-01bf-a46a-5c9b373a3bab",
          "alias" : "All Devices",
          "filter" : {
            "type" : "entityType",
            "resolveMultiple" : true,
            "entityType" : "DEVICE"
          }
        }
      },
      "filters" : {
        "e1647e6f-faae-00bb-4008-6163a5163284" : {
          "id" : "e1647e6f-faae-00bb-4008-6163a5163284",
          "filter" : "Solo Usuarios Cliente",
          "keyFilters" : [ {
            "key" : {
              "type" : "ENTITY_FIELD",
              "key" : "ownerName"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "EQUAL",
                "value" : {
                  "defaultValue" : "Usuarios",
                  "dynamicValue" : null
                },
                "ignoreCase" : true,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : true
        },
        "e8ae092f-7398-6244-cfe4-37c73fc9dfd8" : {
          "id" : "e8ae092f-7398-6244-cfe4-37c73fc9dfd8",
          "filter" : "Solo Admin Tenants",
          "keyFilters" : [ {
            "key" : {
              "type" : "ENTITY_FIELD",
              "key" : "ownerName"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "EQUAL",
                "value" : {
                  "defaultValue" : "MPF - Pisco",
                  "dynamicValue" : null
                },
                "ignoreCase" : true,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : true
        }
      },
      "timewindow" : {
        "displayValue" : "",
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY",
          "hideInterval" : false,
          "hideLastInterval" : false,
          "hideQuickInterval" : false
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1754671992672,
            "endTimeMs" : 1754758392672
          },
          "quickInterval" : "CURRENT_DAY",
          "hideInterval" : false,
          "hideLastInterval" : false,
          "hideFixedInterval" : false,
          "hideQuickInterval" : false
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : false,
        "showEntitiesSelect" : false,
        "showDashboardTimewindow" : false,
        "showDashboardExport" : false,
        "toolbarAlwaysOpen" : true,
        "titleColor" : "rgba(0,0,0,0.870588)",
        "showDashboardLogo" : false,
        "dashboardLogoUrl" : null,
        "hideToolbar" : false,
        "showFilters" : false,
        "showUpdateDashboardImage" : false,
        "dashboardCss" : ".tb-widget-container > .tb-widget {\n    border-radius: 8px !important;\n}\n\ngridster-item:not(.tb-noselect) > .tb-widget-container > .tb-widget {\n    cursor: default !important;\n}\n\n.tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-row {\n    cursor: pointer;\n}\n\n.tb-widget-container > .tb-widget .tb-legend-keys {\n    cursor: pointer;\n}\n\n.tb-dashboard-page.dark tb-dashboard > div {\n    background-color: #0A1F36 !important; /* rgb(238, 238, 238)*/\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget {\n    background: #0D2743 !important;\n    color: rgba(255, 255, 255, 0.87) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget svg tspan {\n    fill: rgba(255, 255, 255, 0.87) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-latest-chart-legend-item-label div {\n    color: rgba(255, 255, 255, 0.38) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-latest-chart-legend-item-value {\n    color: rgba(255, 255, 255, 0.87) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-latest-chart-shape svg text {\n    fill: rgba(255, 255, 255, 0.87) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-time-series-chart-legend-type-label {\n    color: rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-time-series-chart-legend-item-label div {\n    color: rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-time-series-chart-legend-value {\n    color: rgba(255, 255, 255, 0.87) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .flot-text {\n    color: rgba(255, 255, 255, 0.87) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .flot-text > div > div {\n    color: rgba(255, 255, 255, 0.87) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-row {\n    background-color: #0D2743 !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell.mat-mdc-table-sticky {\n    background-color: #0D2743 !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-row .mat-mdc-cell.mat-mdc-table-sticky {\n    background-color: #0D2743 !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell {\n    color: rgba(255, 255, 255, 0.87) !important;\n    border-bottom-color: rgba(255, 255, 255, 0.2) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell {\n    color: rgba(255, 255, 255, 0.87) !important;\n    border-bottom-color: rgba(255, 255, 255, 0.2) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell .mat-sort-header-arrow {\n    color: rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-divider {\n    border-top-color: rgba(255, 255, 255, 0.2) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-input-element::placeholder {\n    color: rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-input-element::-moz-placeholder {\n    color: rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-input-element::-webkit-input-placeholder {\n    color: rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-input-element:-ms-input-placeholder {\n    color: rgba(255, 255, 255, 0.57) !important;\n}\n\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell .mdc-checkbox__background,.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-header-cell .mdc-checkbox__background {\n    border-color : rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell button.mat-mdc-icon-button mat-icon {\n    color : rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget mat-toolbar.mat-mdc-table-toolbar:not([color=\"primary\"]) button.mat-mdc-icon-button mat-icon {\n    color : rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-table .mat-mdc-cell button.mat-mdc-icon-button[disabled][disabled] mat-icon {\n    color : rgba(255, 255, 255, 0.2) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator {\n    color: rgba(255, 255, 255, 0.57) !important;\n}\n\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator button.mat-mdc-icon-button {\n    color : rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator button.mat-mdc-icon-button[disabled][disabled] {\n    color : rgba(255, 255, 255, 0.2) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .tb-table-widget .mat-mdc-paginator .mat-mdc-select-value {\n    color : rgba(255, 255, 255, 0.57) !important;\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .mat-mdc-select-arrow {\n    color : rgba(255, 255, 255, 0.57);\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple:before {\n    border-bottom-color: rgba(255, 255, 255, 0.4);\n}\n\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__leading, \n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,\n.tb-dashboard-page.dark .tb-widget-container > .tb-widget .mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing {\n    border-color: rgba(255, 255, 255, 0.4);\n}\n\n.tb-dashboard-page.dark .tb-markdown-view div,\n.tb-dashboard-page.dark .tb-markdown-view div.param,\n.tb-dashboard-page.dark .tb-markdown-view .header .title,\n.tb-dashboard-page.dark .tb-markdown-view p {\n    color : rgba(255, 255, 255, 0.87);\n}\n\n.tb-dashboard-page.dark .tb-markdown-view div.param-title,\n.tb-dashboard-page.dark .tb-markdown-view .header .subtitle {\n    color : rgba(255, 255, 255, 0.6);\n}\n\n\n.tb-dashboard-page.dark .tb-powered-by-footer {\n    color : rgba(255, 255, 255, 0.87) !important;\n}\n\n/* Override value card background */\n.tb-dashboard-page.dark tb-value-card-widget .tb-value-card-panel {\n    background: #0D2743 !important;\n}\n\n/* Optional: overlay blur background fix */\n.tb-dashboard-page.dark tb-value-card-widget .tb-value-card-overlay {\n    background: rgba(0, 0, 0, 0.4) !important;\n}\n\n/* Override value card label and value text color */\n.tb-dashboard-page.dark tb-value-card-widget .tb-value-card-value,\n.tb-dashboard-page.dark tb-value-card-widget .tb-value-card-label-row div {\n    color: rgba(255, 255, 255, 0.87) !important;\n}\n\n/* Override subtitle or helper text if any */\n.tb-dashboard-page.dark tb-value-card-widget .tb-value-card-label-row div:nth-child(2) {\n    color: rgba(255, 255, 255, 0.6) !important;\n}\n\n/* Battery widget container background */\n.tb-dashboard-page.dark tb-battery-level-widget .tb-battery-level-panel {\n    background: #0D2743 !important;\n}\n\n/* Overlay background fix */\n.tb-dashboard-page.dark tb-battery-level-widget .tb-battery-level-overlay {\n    background: rgba(0, 0, 0, 0.4) !important;\n}\n\n/* Battery title text */\n.tb-dashboard-page.dark tb-battery-level-widget .tb-widget-title .title {\n    color: rgba(255, 255, 255, 0.87) !important;\n}\n\n/* Battery percentage value */\n.tb-dashboard-page.dark tb-battery-level-widget .tb-battery-level-value {\n    color: rgba(255, 255, 255, 0.87) !important;\n}\n\n/* Optional: adjust indicator color if needed (or leave it if it's intentional) */\n/* Uncomment and modify if you want a darker-themed green indicator\n.tb-dashboard-page.dark tb-battery-level-widget .tb-battery-level-indicator-box {\n    background-image: linear-gradient(0deg, #5cdf90 0%, #5cdf90 100%) !important;\n}\n*/"
      }
    },
    "name" : "Admin Panel",
    "resources" : null,
    "assignedCustomers" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "c7881db0-8f1f-11f0-a61c-01e0c85fd5dd"
    }
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}